ARG PYTHON_VERSION=3.10.5
ARG R_VERSION=4.2.0
FROM r-base:${R_VERSION}
LABEL maintainer="Name <name@gmail.com>"

ARG PYTHON_VERSION
ARG R_VERSION


RUN apt update && export DEBIAN_FRONTEND=noninteractive \
  && apt -y install bash sudo curl wget nano git libzip-dev python3 python3-pip \
  make build-essential libssl-dev zlib1g-dev \
  libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \
  libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev \
  chromium \
  && pip3 install -U wheel radian \
  && apt-get autoremove -y && apt-get clean -y

#to install languageserver package
RUN apt install --assume-yes --no-install-recommends build-essential libcurl4-openssl-dev libssl-dev libxml2-dev

RUN echo 'docker    ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers \
  && chsh -s $(which bash) docker
USER docker
ENV HOME  /home/docker
ENV R_LIBS_USER /home/docker/.R/${R_VERSION}/libs

RUN mkdir -p $R_LIBS_USER
RUN R -e 'install.packages(c("languageserver", "tidyverse"), Ncpus=parallel::detectCores() / 2)'

RUN curl https://pyenv.run | bash
RUN printf "export PATH=\"\$HOME/.pyenv/bin:\$HOME/.pyenv/versions/${PYTHON_VERSION}/bin/:\$PATH\"\neval \"\$(pyenv init --path)\"\neval \"\$(pyenv virtualenv-init -)\"" > $HOME/.bashrc 
ENV PYENV_ROOT $HOME/.pyenv
ENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH

RUN pyenv install ${PYTHON_VERSION}
RUN pyenv global ${PYTHON_VERSION}
RUN pyenv rehash
ARG PYTHON_BIN=$HOME/.pyenv/versions/${PYTHON_VERSION}/bin/python

RUN $PYTHON_BIN -m pip install --upgrade pip
COPY src/requirements.txt requirements.txt
RUN $PYTHON_BIN -m pip install -r requirements.txt

version: '3.8'

services:
  app:
    build: .
    # entrypoint: ./.docker/entrypoint.sh 

// For format details, see https://aka.ms/devcontainer.json. For config options, see the README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.224.2/containers/docker-existing-docker-compose
// If you want to run as a non-root user in the container, see .devcontainer/docker-compose.yml.
{
	"name": "Prepaf Modeling 2",

	// Update the 'dockerComposeFile' list if you have more compose files or use different names.
	// The .devcontainer/docker-compose.yml file contains any overrides you need/want to make.
	"dockerComposeFile": [
		"../docker-compose.yml",
		"docker-compose.yml"
	],

	// The 'service' property is the name of the service for the container that VS Code should
	// use. Update this value and .devcontainer/docker-compose.yml to the real service name.
	"service": "app",

	// The optional 'workspaceFolder' property is the path VS Code should open by default when
	// connected. This is typically a file mount in .devcontainer/docker-compose.yml
	"workspaceFolder": "/usr/src/app",

	// Set default container specific settings.json values on container create.
	"settings": {
		"r.bracketedPaste": true,
		"r.rterm.linux": "/usr/local/bin/radian", //Use this only for Linux
		"r.lsp.path": "/usr/bin/R",
		"r.lsp.debug": true,
		"r.lsp.diagnostics": true,
		"r.rterm.option": [
		"--no-save",
		"--no-restore",
		"--r-binary=/usr/bin/R"
		],
	},

	// Add the IDs of extensions you want installed when the container is created.
	"extensions": [
		"Ikuyadeu.r",
		"eamodio.gitlens",
		"humao.rest-client",
		"ms-python.python",
		"streetsidesoftware.code-spell-checker"
	],

	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	"forwardPorts": [5000],

	// Uncomment the next line if you want start specific services in your Docker Compose config.
	// "runServices": [],

	// Uncomment the next line if you want to keep your containers running after VS Code shuts down.
	// "shutdownAction": "none",

	// Uncomment the next line to run commands after the container is created - for example installing curl.
	//  "postCreateCommand": "sudo apt-get update",

	// Uncomment to connect as a non-root user if you've added one. See https://aka.ms/vscode-remote/containers/non-root.
	"remoteUser": "docker"
}

version: '3.8'
services:
  # Update this to the name of the service you want to work with in your docker-compose.yml file
  app:
    # If you want add a non-root user to your Dockerfile, you can use the "remoteUser"
    # property in devcontainer.json to cause VS Code its sub-processes (terminals, tasks, 
    # debugging) to execute as the user. Uncomment the next line if you want the entire 
    # container to run as this user instead. Note that, on Linux, you may need to 
    # ensure the UID and GID of the container user you create matches your local user. 
    # See https://aka.ms/vscode-remote/containers/non-root for details.
    #
    # user: vscode

    # Uncomment if you want to override the service's Dockerfile to one in the .devcontainer 
    # folder. Note that the path of the Dockerfile and context is relative to the primary 
    # docker-compose.yml file (the first in the devcontainer.json "dockerComposeFile"
    # array). The sample below assumes your primary file is in the root of your project.
    #
    # build:
    #   context: .
    #   dockerfile: .devcontainer/Dockerfile

    volumes:
      # Update this to wherever you want VS Code to mount the folder of your project
      - .:/usr/src/app:cached

      # Uncomment the next line to use Docker from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker-compose for details.
      # - /var/run/docker.sock:/var/run/docker.sock 

    # Uncomment the next four lines if you will use a ptrace-based debugger like C++, Go, and Rust.
    # cap_add:
    #   - SYS_PTRACE
    # security_opt:
    #   - seccomp:unconfined

    # Overrides default command so things don't shut down after the process ends.
    command: /bin/sh -c "while sleep 1000; do :; done"
